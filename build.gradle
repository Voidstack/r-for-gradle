plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
}

group = 'com.enosistudio'
version = '1.0.2'

// Properties equivalent to Maven properties
ext {
    encoding = 'UTF-8'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

dependencies {
    // Gradle API (equivalent to maven-plugin-api)
    implementation gradleApi()

    // JetBrains Annotations (same version as Maven)
    implementation 'org.jetbrains:annotations:26.0.2-1'

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testImplementation gradleTestKit()
}

gradlePlugin {
    website = 'https://github.com/Voidstack/r-for-gradle'
    vcsUrl = 'https://github.com/Voidstack/r-for-gradle'

    plugins {
        rForGradle {
            id = 'com.enosistudio.r-for-gradle'
            implementationClass = 'com.enosistudio.GenerateRPlugin'
            displayName = 'r-for-gradle'
            description = 'Generate compile-time constants for all your resource files automatically, just like Android\'s R.java class.'
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// Javadoc configuration
tasks.named('javadoc') {
    options.encoding = encoding
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

// Compilation configuration
tasks.withType(JavaCompile) {
    options.encoding = encoding
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'r-for-gradle'
                description = 'Generate compile-time constants for all your resource files automatically, just like Android\'s R.java class.'
                url = 'https://github.com/Voidstack/r-for-gradle'

                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'voidstack'
                        name = 'Baptiste Martin'
                        email = 'baptiste.martin56@outlook.fr'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/Voidstack/r-for-gradle.git'
                    developerConnection = 'scm:git:ssh://github.com:Voidstack/r-for-gradle.git'
                    url = 'https://github.com/Voidstack/r-for-gradle'
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            url = project.version.endsWith('SNAPSHOT')
                ? "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                : "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.findProperty("sonatypeUsername") ?: System.getenv("SONATYPE_USERNAME") ?: ""
                password = project.findProperty("sonatypePassword") ?: System.getenv("SONATYPE_PASSWORD") ?: ""
            }
        }
    }
}

// GPG Signing (equivalent to maven-gpg-plugin)
signing {
    def signingKey = project.findProperty("signingKey") ?: System.getenv("SIGNING_KEY")
    def signingPassword = project.findProperty("signingPassword") ?: System.getenv("SIGNING_PASSWORD")

    if (signingKey) {
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        // Fallback to default GPG configuration
        useGpgCmd()
    }

    sign publishing.publications.maven
}